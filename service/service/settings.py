"""
Django settings for service project.

Generated by 'django-admin startproject' using Django 3.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import logging
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
import environ
import sqlparse

BASE_DIR = Path(__file__).resolve().parent.parent

# инициализируем env
env = environ.Env()
environ.Env.read_env(env_file=os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False if os.getenv('DEBUG', 'False').strip().lower() == 'false' else True

DEBUG = env.bool('DEBUG', default=False)

# с помащю .list() - приводим переменную к списку
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # django-cachalot !!!!!!!!!!!!!!!!!!!
    'cachalot',

    'clients.apps.ClientsConfig',
    'services.apps.ServicesConfig',


]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',


]

ROOT_URLCONF = 'service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': env('DB_HOST'),
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASS')
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# Только для разработки:
STATIC_URL = '/static/'  # Путь, по которому будет доступна статика в браузере
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # Папка, в которой будут собраны все статические файлы

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


if DEBUG:
    import socket
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[:-1] + "1" for ip in ips]  # Авто-подстановка IP контейнера
    # dev пакеты
    INSTALLED_APPS += ['debug_toolbar', 'django_extensions']
    # django-debug-toolbar-force, вывести gebug_toolbar на странице с json в конце урла - ?debug-toolbar &debug-toolbar
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware',
                   'debug_toolbar_force.middleware.ForceDebugToolbarMiddleware']

    SHELL_PLUS_IMPORTS = [
        "from utils.utils import *"
    ]
#
# if not DEBUG:
#     INSTALLED_APPS = [app for app in INSTALLED_APPS if app != "debug_toolbar"]
#     MIDDLEWARE = [m for m in MIDDLEWARE if m != "debug_toolbar.middleware.DebugToolbarMiddleware" and m !=
#                                                         "debug_toolbar_force.middleware.ForceDebugToolbarMiddleware"]
#

LOGGING = {
    'version': 1,
    'handlers': {
        'console': {'class': 'logging.StreamHandler'}
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG'
        }
    }
}


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        # 'rest_framework.renderers.BrowsableAPIRenderer',
    ]
}


CELERY_BROKER_URL = 'redis://redis:6379/0'

# устанавливаем редис кешем по умолчанию, django-cachalot использует джанго кеш, джанго кеш использует редис
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379/1',
    }
}
# создаём переменную которая будет ключём в кеше
PRICE_CACHE_NAME = 'price_cache'
# print('sfsdfsdfsdf')
CACHALOT_TIMEOUT = 60 * 10  # 10 минут кэша
CACHALOT_ENABLED = False  # Можно отключить кэширование
CACHALOT_CACHE = 'default'  # Выбор кэша, если их несколько

